// Include support for different sign-in methods, like via Google or socials (displayName will need to be added to UserInfo for that as well as functions in this doc supporting those sign-in options).
import { createUserWithEmailAndPassword, updateProfile, signInWithEmailAndPassword, signOut } from 'firebase/auth';
import {doc, getDoc, writeBatch} from 'firebase/firestore';
import { auth, db } from '../firebase';
import type { UserInfo } from '../types';

export const authService = {
    // This function gets the current user from Firebase via currentUser method (returns null if the user is not logged in).
    // It then retrieves the user doc from "users" collection, ensures it exists, and if so stores that doc's values in a UserInfo object.
    async getCurrentUser(): Promise<UserInfo | null> {
        const user = auth.currentUser;
        if (!user) return null;
        const userDoc = await getDoc(doc(db, "users", user.uid));
        return userDoc.exists() ? ({ uid: user.uid, ...userDoc.data() } as UserInfo) : null;
    },

    // This is just a simple function that retrieves the current user's info (AKA that user's document).
    async getUserInfo(uid: string): Promise<UserInfo | null> {
        const userDoc = await getDoc(doc(db, "users", uid));
        return userDoc.exists() ? ({ uid: userDoc.id, ...userDoc.data() } as UserInfo) : null;  
    },
    
    // This function handles user sign-up, promises a UserInfo object.
    async signUp(
        email: string, 
        password: string, 
        displayName: string, 
        username: string
    ): Promise<UserInfo> {
        const { user } = await createUserWithEmailAndPassword(auth, email, password); 

        // Updating the user's profile with displayName param.
        await updateProfile(user, { displayName });

        // Setting up a userInfo object with the values generated by Firebase create user function.
        const userInfo: Omit<UserInfo, 'uid'> = {
            email,
            displayName,
            username: username.toLowerCase(),
            createdAt: new Date().toISOString()
        };

        // Setting up a batch to handle multiple writes to Firestore in a single atomic operation.
        const batch = writeBatch(db);

        // Setting up a separate document for the "usernames" collection to ensure no duplicate usernames.
        batch.set(doc(db, "usernames", userInfo.username), { 
            uid: user.uid,
            username: username.toLowerCase(),
            createdAt: new Date().toISOString()
        });

        // Setting up a user doc via userInfo object above and committing the write to Firestore.
        batch.set(doc(db, "users", user.uid), userInfo);
        await batch.commit();

        return {
            uid: user.uid,
            ...userInfo
        };
    },

    // This function handles user sign-in, checks if the user exists (has info in Firestore).
    async signIn(
        email: string, 
        password: string
    ): Promise<UserInfo> {
        const { user } = await signInWithEmailAndPassword(auth, email, password);
        const userInfo = await this.getUserInfo(user.uid);
        if (!userInfo) throw new Error("User info not found after sign-in.");
        return userInfo;
    },

    // This function handles user sign-out.
    async signOut(): Promise<void> {
        await signOut(auth);
    },

    // This function ensures that the user's information in Firestore db is deleted when the user is deleted.
    async deleteUser(uid: string): Promise<void> {
        const userInfo = await this.getUserInfo(uid);

        // If the user does not exist, no need to execute rest of function code.
        if (!userInfo) return;

        const batch = writeBatch(db);

        // Delete user and username docs and commit writes.
        batch.delete(doc(db, "users", uid));
        batch.delete(doc(db, "usernames", userInfo.username));
        await batch.commit();
    },

    // As its name suggests, this function returns a boolean indicating a username's existence in the "usernames" collection.
    async checkUsernameExists(username: string): Promise<boolean> {
        const usernameDoc = await getDoc(doc(db, "usernames", username.toLowerCase()));
        return usernameDoc.exists();
    }
};